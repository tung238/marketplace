// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TNMarketplace.Repository.EfCore;

namespace TNMarketplace.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181105154426_addarea")]
    partial class addarea
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OpenIddict.Models.OpenIddictApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId")
                        .IsRequired();

                    b.Property<string>("ClientSecret");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("ConsentType");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Permissions");

                    b.Property<string>("PostLogoutRedirectUris");

                    b.Property<string>("Properties");

                    b.Property<string>("RedirectUris");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("Properties");

                    b.Property<string>("Scopes");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("OpenIddictAuthorizations");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Properties");

                    b.Property<string>("Resources");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("AuthorizationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset?>("CreationDate");

                    b.Property<DateTimeOffset?>("ExpirationDate");

                    b.Property<string>("Payload");

                    b.Property<string>("Properties");

                    b.Property<string>("ReferenceId");

                    b.Property<string>("Status");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.ToTable("OpenIddictTokens");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Mobile");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationUserPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<byte[]>("Content");

                    b.Property<string>("ContentType");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("ApplicationUserPhotos");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Area", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(200);

                    b.Property<string>("NameWithType")
                        .IsRequired()
                        .HasColumnName("NameWithType")
                        .HasMaxLength(400);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnName("Path");

                    b.Property<string>("PathWithType")
                        .IsRequired()
                        .HasColumnName("PathWithType");

                    b.Property<int>("RegionId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("Slug")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .HasColumnName("Type")
                        .HasMaxLength(200);

                    b.HasKey("ID");

                    b.HasIndex("RegionId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<bool>("Enabled")
                        .HasColumnName("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(255);

                    b.Property<int>("Ordering")
                        .HasColumnName("Ordering");

                    b.Property<int>("Parent")
                        .HasColumnName("Parent");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("Slug")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.CategoryListingType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnName("CategoryID");

                    b.Property<int>("ListingTypeID")
                        .HasColumnName("ListingTypeID");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ListingTypeID");

                    b.ToTable("CategoryListingTypes");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.CategoryStat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnName("CategoryID");

                    b.Property<int>("Count")
                        .HasColumnName("Count");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("CategoryStats");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ContentPage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Html")
                        .HasColumnName("Html");

                    b.Property<string>("Keywords")
                        .HasColumnName("Keywords")
                        .HasMaxLength(200);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<int>("Ordering")
                        .HasColumnName("Ordering");

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("Slug")
                        .HasMaxLength(100);

                    b.Property<string>("Template")
                        .HasColumnName("Template")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Title")
                        .HasMaxLength(150);

                    b.Property<string>("UserID")
                        .HasColumnName("UserID")
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.ToTable("ContentPages");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Culture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("Body");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<bool>("SendCopy")
                        .HasColumnName("SendCopy");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("Slug")
                        .HasMaxLength(100);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("Subject")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Listing", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("Active");

                    b.Property<int?>("AreaID");

                    b.Property<int>("CategoryID")
                        .HasColumnName("CategoryID");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnName("ContactEmail")
                        .HasMaxLength(200);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnName("ContactName")
                        .HasMaxLength(200);

                    b.Property<string>("ContactPhone")
                        .HasColumnName("ContactPhone")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<bool>("Enabled")
                        .HasColumnName("Enabled");

                    b.Property<DateTime>("Expiration")
                        .HasColumnName("Expiration");

                    b.Property<int>("ExternalId")
                        .HasColumnName("ExternalId");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnName("IP")
                        .HasMaxLength(50);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<double?>("Latitude")
                        .HasColumnName("Latitude");

                    b.Property<int>("ListingTypeID")
                        .HasColumnName("ListingTypeID");

                    b.Property<string>("Location")
                        .HasColumnName("Location")
                        .HasMaxLength(250);

                    b.Property<double?>("Longitude")
                        .HasColumnName("Longitude");

                    b.Property<bool>("Premium")
                        .HasColumnName("Premium");

                    b.Property<double?>("Price")
                        .HasColumnName("Price");

                    b.Property<int>("RegionId")
                        .HasColumnName("RegionId");

                    b.Property<bool>("ShowEmail")
                        .HasColumnName("ShowEmail");

                    b.Property<bool>("ShowPhone")
                        .HasColumnName("ShowPhone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Title")
                        .HasMaxLength(500);

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnName("UserID")
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.HasIndex("AreaID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ListingTypeID");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserID");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ListingMeta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldID")
                        .HasColumnName("FieldID");

                    b.Property<int>("ListingID")
                        .HasColumnName("ListingID");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("Value");

                    b.HasKey("ID");

                    b.HasIndex("FieldID");

                    b.HasIndex("ListingID");

                    b.ToTable("ListingMeta");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ListingPicture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ListingID")
                        .HasColumnName("ListingID");

                    b.Property<int>("Ordering")
                        .HasColumnName("Ordering");

                    b.Property<int>("PictureID")
                        .HasColumnName("PictureID");

                    b.HasKey("ID");

                    b.HasIndex("ListingID");

                    b.HasIndex("PictureID");

                    b.ToTable("ListingPictures");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ListingReview", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("Active");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<bool>("Enabled")
                        .HasColumnName("Enabled");

                    b.Property<int?>("ListingID")
                        .HasColumnName("ListingID");

                    b.Property<int?>("OrderID")
                        .HasColumnName("OrderID");

                    b.Property<double>("Rating")
                        .HasColumnName("Rating");

                    b.Property<bool>("Spam")
                        .HasColumnName("Spam");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasMaxLength(250);

                    b.Property<string>("UserFrom")
                        .IsRequired()
                        .HasColumnName("UserFrom")
                        .HasMaxLength(128);

                    b.Property<string>("UserTo")
                        .IsRequired()
                        .HasColumnName("UserTo")
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.HasIndex("ListingID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UserFrom");

                    b.HasIndex("UserTo");

                    b.ToTable("ListingReviews");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ListingStat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountRepeated")
                        .HasColumnName("CountRepeated");

                    b.Property<int>("CountSpam")
                        .HasColumnName("CountSpam");

                    b.Property<int>("CountView")
                        .HasColumnName("CountView");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<int>("ListingID")
                        .HasColumnName("ListingID");

                    b.HasKey("ID");

                    b.HasIndex("ListingID");

                    b.ToTable("ListingStats");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ListingType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ButtonLabel")
                        .IsRequired()
                        .HasColumnName("ButtonLabel")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(100);

                    b.Property<int>("OrderTypeID")
                        .HasColumnName("OrderTypeID");

                    b.Property<string>("OrderTypeLabel")
                        .HasColumnName("OrderTypeLabel")
                        .HasMaxLength(20);

                    b.Property<bool>("PaymentEnabled")
                        .HasColumnName("PaymentEnabled");

                    b.Property<bool>("PriceEnabled")
                        .HasColumnName("PriceEnabled");

                    b.Property<string>("PriceUnitLabel")
                        .HasColumnName("PriceUnitLabel")
                        .HasMaxLength(20);

                    b.Property<bool>("ShippingEnabled")
                        .HasColumnName("ShippingEnabled");

                    b.HasKey("ID");

                    b.ToTable("ListingTypes");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("Body");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<int>("MessageThreadID")
                        .HasColumnName("MessageThreadID");

                    b.Property<string>("UserFrom")
                        .IsRequired()
                        .HasColumnName("UserFrom")
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.HasIndex("MessageThreadID");

                    b.HasIndex("UserFrom");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.MessageParticipant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MessageThreadID")
                        .HasColumnName("MessageThreadID");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnName("UserID")
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.HasIndex("MessageThreadID");

                    b.HasIndex("UserID");

                    b.ToTable("MessageParticipant");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.MessageReadState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<int>("MessageID")
                        .HasColumnName("MessageID");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnName("ReadDate");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnName("UserID")
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.HasIndex("MessageID");

                    b.HasIndex("UserID");

                    b.ToTable("MessageReadState");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.MessageThread", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<int?>("ListingID")
                        .HasColumnName("ListingID");

                    b.Property<string>("Subject")
                        .HasColumnName("Subject")
                        .HasMaxLength(200);

                    b.HasKey("ID");

                    b.HasIndex("ListingID");

                    b.ToTable("MessageThread");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.MetaCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnName("CategoryID");

                    b.Property<int>("FieldID")
                        .HasColumnName("FieldID");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("FieldID");

                    b.ToTable("MetaCategories");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.MetaField", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlTypeID")
                        .HasColumnName("ControlTypeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Options")
                        .HasColumnName("Options");

                    b.Property<int?>("Ordering")
                        .HasColumnName("Ordering");

                    b.Property<string>("Placeholder")
                        .HasColumnName("Placeholder")
                        .HasMaxLength(255);

                    b.Property<bool>("Required")
                        .HasColumnName("Required");

                    b.Property<bool>("Searchable")
                        .HasColumnName("Searchable");

                    b.HasKey("ID");

                    b.ToTable("MetaFields");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("ApplicationFee")
                        .HasColumnName("ApplicationFee");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("Currency")
                        .HasColumnName("Currency")
                        .IsFixedLength(true)
                        .HasMaxLength(3);

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnName("FromDate");

                    b.Property<int>("ListingID")
                        .HasColumnName("ListingID");

                    b.Property<int>("ListingTypeID")
                        .HasColumnName("ListingTypeID");

                    b.Property<string>("Message")
                        .HasColumnName("Message");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("Modified");

                    b.Property<string>("PaymentPlugin")
                        .HasColumnName("PaymentPlugin")
                        .HasMaxLength(250);

                    b.Property<double?>("Price")
                        .HasColumnName("Price");

                    b.Property<double?>("Quantity")
                        .HasColumnName("Quantity");

                    b.Property<int>("Status")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnName("ToDate");

                    b.Property<string>("UserProvider")
                        .IsRequired()
                        .HasColumnName("UserProvider")
                        .HasMaxLength(128);

                    b.Property<string>("UserReceiver")
                        .IsRequired()
                        .HasColumnName("UserReceiver")
                        .HasMaxLength(128);

                    b.HasKey("ID");

                    b.HasIndex("ListingID");

                    b.HasIndex("UserProvider");

                    b.HasIndex("UserReceiver");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Picture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnName("MimeType")
                        .HasMaxLength(40);

                    b.Property<string>("SeoFilename")
                        .HasColumnName("SeoFilename")
                        .HasMaxLength(200);

                    b.HasKey("ID");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Region", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(200);

                    b.Property<string>("NameWithType")
                        .IsRequired()
                        .HasColumnName("NameWithType")
                        .HasMaxLength(400);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("Slug")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .HasColumnName("Type")
                        .HasMaxLength(200);

                    b.HasKey("ID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CultureId");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Setting", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnName("ID");

                    b.Property<string>("AgreementLabel")
                        .HasColumnName("AgreementLabel")
                        .HasMaxLength(100);

                    b.Property<bool>("AgreementRequired")
                        .HasColumnName("AgreementRequired");

                    b.Property<string>("AgreementText")
                        .HasColumnName("AgreementText");

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasColumnName("DateFormat")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<bool>("EmailConfirmedRequired")
                        .HasColumnName("EmailConfirmedRequired");

                    b.Property<string>("EmailContact")
                        .IsRequired()
                        .HasColumnName("EmailContact")
                        .HasMaxLength(255);

                    b.Property<string>("EmailDisplayName")
                        .HasColumnName("EmailDisplayName")
                        .HasMaxLength(100);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<bool>("ListingReviewEnabled")
                        .HasColumnName("ListingReviewEnabled");

                    b.Property<int>("ListingReviewMaxPerDay")
                        .HasColumnName("ListingReviewMaxPerDay");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(255);

                    b.Property<string>("SearchPlaceHolder")
                        .IsRequired()
                        .HasColumnName("SearchPlaceHolder")
                        .HasMaxLength(255);

                    b.Property<string>("SignupText")
                        .HasColumnName("SignupText");

                    b.Property<string>("Slogan")
                        .IsRequired()
                        .HasColumnName("Slogan")
                        .HasMaxLength(255);

                    b.Property<string>("SmtpHost")
                        .HasColumnName("SmtpHost")
                        .HasMaxLength(100);

                    b.Property<string>("SmtpPassword")
                        .HasColumnName("SmtpPassword")
                        .HasMaxLength(100);

                    b.Property<int?>("SmtpPort")
                        .HasColumnName("SmtpPort");

                    b.Property<bool>("SmtpSSL")
                        .HasColumnName("SmtpSSL");

                    b.Property<string>("SmtpUserName")
                        .HasColumnName("SmtpUserName")
                        .HasMaxLength(100);

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnName("Theme")
                        .HasMaxLength(250);

                    b.Property<string>("TimeFormat")
                        .IsRequired()
                        .HasColumnName("TimeFormat")
                        .HasMaxLength(10);

                    b.Property<double>("TransactionFeePercent")
                        .HasColumnName("TransactionFeePercent");

                    b.Property<double>("TransactionMinimumFee")
                        .HasColumnName("TransactionMinimumFee");

                    b.Property<double>("TransactionMinimumSize")
                        .HasColumnName("TransactionMinimumSize");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnName("Version")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.SettingDictionary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnName("Created");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnName("LastUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(200);

                    b.Property<int>("SettingID")
                        .HasColumnName("SettingID");

                    b.Property<string>("Value")
                        .HasColumnName("Value")
                        .HasMaxLength(200);

                    b.HasKey("ID");

                    b.HasIndex("SettingID");

                    b.ToTable("SettingDictionary");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.Models.OpenIddictAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationRoleClaim", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationUserClaim", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationUserLogin", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationUserPhoto", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("ProfilePhoto")
                        .HasForeignKey("TNMarketplace.Core.Entities.ApplicationUserPhoto", "ApplicationUserId");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ApplicationUserToken", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Area", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Region", "Region")
                        .WithMany("Areas")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.CategoryListingType", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Category", "Category")
                        .WithMany("CategoryListingTypes")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.ListingType", "ListingType")
                        .WithMany("CategoryListingTypes")
                        .HasForeignKey("ListingTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.CategoryStat", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Category", "Category")
                        .WithMany("CategoryStats")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Listing", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Area")
                        .WithMany("Listings")
                        .HasForeignKey("AreaID");

                    b.HasOne("TNMarketplace.Core.Entities.Category", "Category")
                        .WithMany("Listings")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.ListingType", "ListingType")
                        .WithMany("Listings")
                        .HasForeignKey("ListingTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.Region", "Region")
                        .WithMany("Listings")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser", "AspNetUser")
                        .WithMany("Listings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ListingMeta", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.MetaField", "MetaField")
                        .WithMany("ListingMetas")
                        .HasForeignKey("FieldID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.Listing", "Listing")
                        .WithMany("ListingMetas")
                        .HasForeignKey("ListingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ListingPicture", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Listing", "Listing")
                        .WithMany("ListingPictures")
                        .HasForeignKey("ListingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.Picture", "Picture")
                        .WithMany("ListingPictures")
                        .HasForeignKey("PictureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ListingReview", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Listing", "Listing")
                        .WithMany("ListingReviews")
                        .HasForeignKey("ListingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.Order", "Order")
                        .WithMany("ListingReviews")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser", "AspNetUserFrom")
                        .WithMany("ListingReviewsUserFrom")
                        .HasForeignKey("UserFrom")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser", "AspNetUserTo")
                        .WithMany("ListingReviewsUserTo")
                        .HasForeignKey("UserTo")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.ListingStat", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Listing", "Listing")
                        .WithMany("ListingStats")
                        .HasForeignKey("ListingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Message", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.MessageThread", "MessageThread")
                        .WithMany("Messages")
                        .HasForeignKey("MessageThreadID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser", "AspNetUser")
                        .WithMany("Messages")
                        .HasForeignKey("UserFrom")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.MessageParticipant", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.MessageThread", "MessageThread")
                        .WithMany("MessageParticipants")
                        .HasForeignKey("MessageThreadID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser", "AspNetUser")
                        .WithMany("MessageParticipants")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.MessageReadState", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Message", "Message")
                        .WithMany("MessageReadStates")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser", "AspNetUser")
                        .WithMany("MessageReadStates")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.MessageThread", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Listing", "Listing")
                        .WithMany("MessageThreads")
                        .HasForeignKey("ListingID");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.MetaCategory", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Category", "Category")
                        .WithMany("MetaCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.MetaField", "MetaField")
                        .WithMany("MetaCategories")
                        .HasForeignKey("FieldID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Order", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Listing", "Listing")
                        .WithMany("Orders")
                        .HasForeignKey("ListingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser", "AspNetUserProvider")
                        .WithMany("OrdersProvider")
                        .HasForeignKey("UserProvider")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TNMarketplace.Core.Entities.ApplicationUser", "AspNetUserReceiver")
                        .WithMany("OrdersReceiver")
                        .HasForeignKey("UserReceiver")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.Resource", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Culture", "Culture")
                        .WithMany("Resources")
                        .HasForeignKey("CultureId");
                });

            modelBuilder.Entity("TNMarketplace.Core.Entities.SettingDictionary", b =>
                {
                    b.HasOne("TNMarketplace.Core.Entities.Setting", "Setting")
                        .WithMany("SettingDictionaries")
                        .HasForeignKey("SettingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
